<?xml version="1.0" encoding="ISO-8859-1"?>

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
	
  <xsl:output method="xml" indent="yes" encoding="utf-8" omit-xml-declaration="yes"/>     

<xsl:variable name="doubleline">
  <xsl:text>================================================================================================================</xsl:text>
</xsl:variable>    
<xsl:variable name="underline">
  <xsl:text>----------------------------------------------------------------------------------------------------------------</xsl:text>
</xsl:variable>    
<xsl:variable name="n">
    <xsl:text>
</xsl:text>
</xsl:variable>

	<!-- Concatenates the text of the node-set separating each with the separator character up to the maximum length -->
	<xsl:template name="concat-max">
		<xsl:param name="nodes"/>
		<xsl:param name="separator"/>
		<xsl:param name="max-length"/>
		<xsl:variable name="temp">
			<xsl:call-template name="concat">
				<xsl:with-param name="nodes" select="$nodes"/>
				<xsl:with-param name="separator" select="$separator"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="string-length($temp) &gt; $max-length"><xsl:value-of select="substring($temp, 1, $max-length)"/>...</xsl:when>
			<xsl:otherwise><xsl:value-of select="$temp"/></xsl:otherwise>
		</xsl:choose>
	</xsl:template>

	<!-- Concatenates the text of the node-set separating each with the separator character -->
	<xsl:template name="concat">
		<xsl:param name="nodes"/>
		<xsl:param name="separator"/>
		<xsl:for-each select="$nodes">
			<xsl:value-of select="."/>
			<xsl:if test="position() != last()">
				<xsl:value-of select="$separator"/>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>

    <xsl:template name="replace-string">
        <xsl:param name="text"/>
        <xsl:param name="replace"/>
        <xsl:param name="with"/>
        <xsl:choose>
            <xsl:when test="contains($text,$replace)">
                <xsl:value-of select="substring-before($text,$replace)"/>
                <xsl:value-of select="$with"/>
                <xsl:call-template name="replace-string">
                    <xsl:with-param name="text" select="substring-after($text,$replace)"/>
                    <xsl:with-param name="replace" select="$replace"/>
                    <xsl:with-param name="with" select="$with"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$text"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
	<!-- Justified the 'value' in a column 'width' characters wide and
	aligns it left, right or centre -->
    <xsl:template name="justify">
		<xsl:param name="value"/>
		<xsl:param name="width"/>
		<xsl:param name="align"/>
		
		<!-- Truncate value if longer than width -->
		<xsl:variable name="output" select="substring($value, 1, $width)"/>
		
		<xsl:choose>
			<xsl:when test="$align='left'">
				<xsl:value-of select="$output"/>
				<xsl:call-template name="duplicate">
					<xsl:with-param name="input" select="' '"/>
					<xsl:with-param name="count" select="$width - string-length($output)"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:when test="$align='right'">
				<xsl:call-template name="duplicate">
					<xsl:with-param name="input" select="' '"/>
					<xsl:with-param name="count" select="$width - string-length($output)"/>
				</xsl:call-template>
				<xsl:value-of select="$output"/>
			</xsl:when>
			<xsl:when test="$align='centre' or $align='center'">
				<xsl:call-template name="duplicate">
					<xsl:with-param name="input" select="' '"/>
					<xsl:with-param name="count" select="floor(($width - string-length($output)) div 2)"/>
				</xsl:call-template>
				<xsl:value-of select="$output"/>
				<xsl:call-template name="duplicate">
					<xsl:with-param name="input" select="' '"/>
					<xsl:with-param name="count" select="ceiling(($width - string-length($output)) div 2)"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>Invalid Alignment passed to justify template</xsl:otherwise>
		</xsl:choose>
    </xsl:template>
    
	<!-- Duplicates the 'input' string 'count' number of times -->
	<xsl:template name="duplicate">
		<xsl:param name="input"/>
		<xsl:param name="count" select="1"/>
		
		<xsl:choose>
			<xsl:when test="not($count) or not($input)"/>
			<xsl:when test="$count = 1">
				<xsl:value-of select="$input"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:if test="$count mod 2">
					<xsl:value-of select="$input"/>
				</xsl:if>
				<xsl:call-template name="duplicate">
					<xsl:with-param name="input" select="concat($input, $input)"/>
					<xsl:with-param name="count" select="floor($count div 2)"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
</xsl:stylesheet>